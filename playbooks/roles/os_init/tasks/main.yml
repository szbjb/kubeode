- name: 关闭防火墙
  service:
    name: firewalld
    enabled: no
    state: stopped

- name: 检查防火墙状态
  command: systemctl is-enabled firewalld
  register: firewalld_status
  failed_when: false  # 忽略非零退出码
  changed_when: false  # 不将此任务视为更改

- name: 禁用 SELinux
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX=enforcing'
    line: 'SELINUX=disabled'

- name: 设置 SELinux 临时为 permissive
  command: setenforce 0
  failed_when: false  # 忽略非零退出码

- name: 修改系统最大打开文件数
  lineinfile:
    path: /etc/security/limits.conf
    line: '* soft nofile 65535'
    state: present

- name: 修改 sysctl.conf 内核参数配置
  blockinfile:
    path: /etc/sysctl.conf
    block: |
      net.ipv4.tcp_syncookies = 1
      net.ipv4.tcp_max_tw_buckets = 20480
      net.ipv4.tcp_max_syn_backlog = 20480
      net.core.netdev_max_backlog = 262144
      net.ipv4.tcp_fin_timeout = 20

- name: 应用 sysctl 配置
  command: sysctl -p

- name: 关闭 swap
  command: swapoff -a

- name: 注释 /etc/fstab 中的 swap
  replace:
    path: /etc/fstab
    regexp: '^(.*swap.*)$'
    replace: '#\1'

- name: 创建 /etc/sysctl.d 目录（如果不存在）
  file:
    path: /etc/sysctl.d
    state: directory
    mode: '0755'

- name: 开启 bridge 网桥过滤
  blockinfile:
    path: /etc/sysctl.d/k8s.conf
    create: yes  # 如果文件不存在则创建
    block: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.ipv4.tcp_keepalive_intvl = 30
      net.ipv4.tcp_keepalive_probes = 10
      net.ipv4.tcp_keepalive_time = 600

- name: 加载 br_netfilter 模块
  shell: modprobe br_netfilter

- name: 创建 /etc/sysconfig/modules 目录（如果不存在）
  file:
    path: /etc/sysconfig/modules
    state: directory
    mode: '0755'

- name: 确保 br_netfilter 模块在启动时加载
  copy:
    dest: /etc/sysconfig/modules/br_netfilter.modules
    content: |
      #!/bin/bash
      modprobe br_netfilter
    mode: '0755'

- name: 确保 ipvs 模块在启动时加载
  copy:
    dest: /etc/sysconfig/modules/ipvs.modules
    content: |
      #!/bin/bash
      modprobe -- ip_vs
      modprobe -- ip_vs_rr
      modprobe -- ip_vs_wrr
      modprobe -- ip_vs_sh
      if lsmod | grep -q nf_conntrack_ipv4; then
        modprobe -- nf_conntrack_ipv4
      else
        modprobe -- nf_conntrack
      fi
    mode: '0755'

- name: 执行 ipvs 模块脚本
  shell: bash /etc/sysconfig/modules/ipvs.modules

- name: 查看加载的模块
  shell: lsmod | grep -e ip_vs -e nf_conntrack
  register: module_check
  failed_when: false  # 忽略非零退出码
  changed_when: false  # 不将此任务视为更改

- name: 设置etcd版本
  set_fact:
    etcd_version: "v3.5.17"


- name: 检查离线下载链接是否可用
  uri:
    url: "http://kubeode.down.local:10086/offline/tools/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    method: GET
    return_content: no
  register: http_check
  ignore_errors: yes
  until: http_check.status == 200
  retries: 3
  delay: 5

- name: 设置下载类型
  set_fact:
    download_type: "{{ 'offline' if http_check.status == 200 else 'online' }}"



- name: 下载etcdctl
  shell: |
    if [ "{{ download_type }}" = "online" ]; then
        wget https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz -O /tmp/etcd-{{ etcd_version }}-linux-amd64.tar.gz
    else
        wget http://kubeode.down.local:10086/offline/tools/etcd-{{ etcd_version }}-linux-amd64.tar.gz -O /tmp/etcd-{{ etcd_version }}-linux-amd64.tar.gz
    fi
  args:
    executable: /bin/bash
  register: download_etcd_result
  until: download_etcd_result is succeeded
  retries: 3
  delay: 5

- name: 解压etcdctl和etcdutl到/usr/bin/
  shell: |
    tar -xzf /tmp/etcd-{{ etcd_version }}-linux-amd64.tar.gz -C /usr/bin/ --strip-components=1 etcd-{{ etcd_version }}-linux-amd64/etcdctl etcd-{{ etcd_version }}-linux-amd64/etcdutl
  args:
    executable: /bin/bash

- name: 更新 /etc/profile 文件
  shell: |
    sed -i /kubeode/d /etc/profile
    echo 'alias helm="kubectl exec -it -n kube-system kubeode-registry-node -- helm"' >> /etc/profile
  args:
    executable: /bin/bash
